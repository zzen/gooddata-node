<h1>Invite user to multiple projects</h1>

<form action="/add" method="post" accept-charset="utf-8" id="projects">

    <h3>Select one or more projects</h3>
    <%- partial('projectOptions', { collection: editableProjects, as: 'project' }) %>

    <!-- <h3>These projects cannot be modified</h3>
    <%- partial('projectItem', { collection: readonlyProjects, as: 'project' }) %> -->

    <h3>Guests to Invite</h3>
    <div>Enter email addresses (separated by comma) to invite</div>
    <textarea name="guests" rows="8" cols="40"></textarea>

    <p><input type="submit" value="Invite Users"></p>
</form>

<div id="users"></div>

<script type="text/javascript" charset="utf-8">
    var users = <%- users %>;
    var selectedMode = false;
    $(document).ready(function() {
        
        var findUsers = function(elems) {
            var urls = [];
            elems.each(function() {
                var parent = $(this).parent('.project');
                var uri = $(parent).attr('data-project-uri');
                urls.push(uri);
            });
            return urls.map(function(url) {
                return users[url].map(function(user) {
                    return user.user.content.email;
                });
            });
        };
        
        $('#projects .project label').mouseover(function() {
            if (!selectedMode) {
                $('#users').html(findUsers($(this)).join('<br>'));
            }
        });
        
        $('#projects input').change(function() {
            var elems = $('#projects input:checked');
            selectedMode = elems.size();
            if (selectedMode) {
                var emails = findUsers(elems);
                $('#users').html(emails.join('<br>'));
            }
        });
    });




    if (!Array.prototype.indexOf) {
        Array.prototype.indexOf = function(elt /*, from*/) {
          var len = this.length;

          var from = Number(arguments[1]) || 0;
          from = (from < 0)
               ? Math.ceil(from)
               : Math.floor(from);
          if (from < 0)
            from += len;

          for (; from < len; from++) {
            if (from in this && this[from] === elt)
              return from;
          }
          return -1;
        };
    }
    if (!Array.prototype.merge) {
        Array.prototype.merge = function(arrayB) {
            for (var i=0; i<arrayB.length; i++) {
                if (this.indexOf(arrayB[i]) < 0) {
                    this.push(arrayB[i]);
                }
            }
        };
    }
    if (!Array.prototype.map) {
        Array.prototype.map = function(fun /*, thisp*/) {
            var len = this.length;

            if (typeof fun != "function") {
                throw new TypeError();
            }

            var res = new Array(len);
            var thisp = arguments[1];
            for (var i = 0; i < len; i++) {
                if (i in this) {
                    res[i] = fun.call(thisp, this[i], i, this);
                }
            }
            return res;
        };
    }
    if (!Array.prototype.forEach) {
        Array.prototype.forEach = function(fun /*, thisp*/) {
            var len = this.length;

            if (typeof fun != "function") {
                throw new TypeError();
            }

            var thisp = arguments[1];
            for (var i = 0; i < len; i++) {
                if (i in this) {
                    fun.call(thisp, this[i], i, this);
                }
            }
        };
    }
    if (!Array.prototype.filter) {
        Array.prototype.filter = function(fun /*, thisp*/) {
            var len = this.length;

            if (typeof fun != "function") {
                throw new TypeError();
            }

            var res = new Array();
            var thisp = arguments[1];

            for (var i = 0; i < len; i++) {
                if (i in this) {
                    var val = this[i]; // in case fun mutates this

                    if (fun.call(thisp, val, i, this)) {
                        res.push(val);
                    }
                }
            }

            return res;
        };
    }

    if (!Array.prototype.every) {
      Array.prototype.every = function(fun /*, thisp*/) {
        var len = this.length;
        if (typeof fun != "function") throw new TypeError();

        var thisp = arguments[1];
        for (var i = 0; i < len; i++)
        {
          if (i in this &&
              !fun.call(thisp, this[i], i, this))
            return false;
        }

        return true;
      };
    }

    if (!Array.prototype.some) {
      Array.prototype.some = function(fun /*, thisp*/) {
        var len = this.length;
        if (typeof fun != "function") throw new TypeError();

        var thisp = arguments[1];
        for (var i = 0; i < len; i++) {
          if (i in this &&
              fun.call(thisp, this[i], i, this))
            return true;
        }

        return false;
      };
    }

    if (!Array.prototype.lastIndexOf) {
      Array.prototype.lastIndexOf = function(elt /*, from*/) {
        var len = this.length;

        var from = Number(arguments[1]);
        if (isNaN(from)) {
          from = len - 1;
        } else {
          from = (from < 0)
               ? Math.ceil(from)
               : Math.floor(from);
          if (from < 0)
            from += len;
          else if (from >= len)
            from = len - 1;
        }

        for (; from > -1; from--) {
          if (from in this &&
              this[from] === elt)
            return from;
        }
        return -1;
      };
    }

    if (!Array.prototype.reduce) {
        Array.prototype.reduce = function(fun /*, initial*/) {
            var len = this.length;
            if (typeof fun != "function") {
                throw new TypeError();
            }

            // no value to return if no initial value and an empty array
            if (len == 0 && arguments.length == 1) {
                throw new TypeError();
            }

            var i = 0;
            if (arguments.length >= 2) {
                var rv = arguments[1];
            } else {
                do {
                    if (i in this) {
                        rv = this[i++];
                        break;
                    }

                    // if array contains no values, no initial value to return
                    if (++i >= len) {
                        throw new TypeError();
                    }
                }
                while (true);
            }

            for (; i < len; i++) {
                if (i in this) {
                    rv = fun.call(null, rv, this[i], i, this);
                }
            }

            return rv;
        };
    }


</script>